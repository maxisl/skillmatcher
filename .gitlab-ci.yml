image: openjdk:8-jdk

variables:
  # should match 'compileSdkVersion'
  ANDROID_COMPILE_SDK: "32"
  # should match 'buildToolsVersion'
  ANDROID_BUILD_TOOLS: "32.0.1"
  # pick cli version from https://developer.android.com/studio/index.html section 'CLI Tools Only'
  ANDROID_SDK_TOOLS: "6514223"

before_script:
  #These commands ensure that our package repository listings are up to date, and it installs packages we'll be using later on, namely:    wget, tar, unzip, and some packages that are necessary to allow 64-bit machines to run Android's 32-bit tools.
  - apt-get --quiet update --yes
  - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1

   # setup Android home for moving/exporting the downloaded sdk into it
  - export ANDROID_HOME="${PWD}/android-home"
  - install -d $ANDROID_HOME
  # install official Android SDK tools from official source
  - wget --output-document=$ANDROID_HOME/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
  - pushd $ANDROID_HOME
  - unzip -d cmdline-tools cmdline-tools.zip
  - popd
  - export PATH=$PATH:${ANDROID_HOME}/cmdline-tools/tools/bin/

stages:
  - build
  - test

build:
  stage: build
  script:
    - ./gradlew assembleDebug
  artifacts:
    paths:
    - app/build/outputs/

unitTests:
  stage: test
  script:
    - ./gradlew test

#Mit cache kann GitLab CI/CD gleichbleibende Installationsordner erkennen und zwischen Containerinstanzen wiederverwenden.
cache:
  key: ${CI_PROJECT_ID}
  paths:
    - .gradle/